<?php

error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);

  if(class_exists("WP_Vul_Scanner")) return;
  
class WP_Vul_Scanner
{
    private  $currentPluginName = "";


    public  function init()
    {
        add_action('admin_init', array($this, 'loadScripts'));
        add_action( 'wp_ajax_wp_vul_scan', array($this, 'scan') );
        add_action( 'admin_menu', array($this,'registerAdmiPage') );

    }

    public  function loadScripts()
    {
        
        wp_register_script('my-plugin-script', plugins_url('js/js.js', __FILE__));
       // wp_register_script('my-plugin-script22', plugins_url('wp_vul_scanner/public/client.min.js', __FILE__),'',true);
        wp_enqueue_script('my-plugin-script');
     // wp_enqueue_script('my-plugin-script22');
        wp_enqueue_script(
            'replace', 
            plugins_url('wp_vul_scanner/public/client.min.js', __FILE__),
             array(), 
             rand(1,1000000), 
             true);
        

    }

    public function registerAdmiPage(){
        add_menu_page(
            'WP Vulnerability Scanner',
            'WP Vulnerability Scanner',
            'manage_options',
            'WP_Vulnerability_Scanner_admin',
            array(
                $this,
                'adminPage'
            ),
            plugins_url('images/scan.png', __FILE__)
           
           // '2.1'
        );

    }

    public function adminPage(){
       echo '<div id="root"></div>';
    }

    public  function scan()
    {

        
        
        $plugins = $this->getAllPlugins();
        if (count($plugins) < 1) {
           $this->sendJsonResponse(array("status"=>0,"msg"=>"No plugins Found"));
        }

        $pluginsData = array();

        unset($plugins['wp_vulnerability_scanner/wp_vulnerability_scanner.php']);
        foreach ($plugins as $key => $data) {
            $tmp        = explode("/", $key);
            $version    = $data['Version'];
            $pluginName = $tmp[0];
             $this->currentPluginName = $pluginName;
           $response = wp_remote_get('https://wpvulndb.com/api/v2/plugins/' . $pluginName);
            if (!isset($response["response"]["code"]) || $response["response"]["code"] != 200) {
               $pluginsData[$this->currentPluginName] = false;
            } else {

                $pluginsData[$pluginName] = $this->processVul($version, json_decode($response['body'], true));
            }

        }
        $this->sendJsonResponse(array("status"=>1,"data"=>$pluginsData));
        

    }

    public function getAllPlugins()
    {
        return get_plugins();
    }

    public function processVul($currentVersion, $data)
    {
        if (!$data) {
            return false;
        }

        if (!isset($data[$this->currentPluginName]["vulnerabilities"])) {
            return false;
        }

        $dataTosend = array();
        foreach ($data[$this->currentPluginName]["vulnerabilities"] as $key => $value) {
            
            if (!isset($value["fixed_in"])) {
                $dataTosend[] = $this->prepareData($value,1);
            }else{
             $dataTosend[] = $this->compareVersions($currentVersion,$value["fixed_in"],$value); 
            }
        }
        if(count($dataTosend) ==0 )
            return false;

        $dataTosend["is_vul"] = 0;
        $dataTosend["maybe_vul"]=0;
        foreach ($dataTosend as $key => $value) {
              if($value["type"] == 1)
                $dataTosend["is_vul"]++;
              elseif ($value["type"] == 2)
                $dataTosend["maybe_vul"]++;

        };


        return $dataTosend;


    }

    public function compareVersions($currentVersion, $fixVersion, $data)
    {
       if($currentVersion == $fixVersion)
        $dataTosend[$this->currentPluginName][] =  $this->prepareData($data,1);
       else{
          $currentTmp = explode("-",$currentVersion);
          $fixedTmp  = explode("-",$fixVersion);
           foreach ($currentTmp as $key => $value) {
                if(!isset($fixedTmp[$key]) || isset($fixedTmp[$key]) && $value < $fixedTmp[$key]){
                  return $this->prepareData($data,2);
                   
                }

           }
                }

                return $this->prepareData($data,0);
    }

    public function prepareData($data,$type)
    {
        return array(
            "title"     => $data["title"],
            "vuln_type" => $data["vuln_type"],
            "type"=>$type
        );
    }

    public function sendJsonResponse($data){
        header('Content-Type: application/json');
          echo json_encode($data);
          die;
    }

}
