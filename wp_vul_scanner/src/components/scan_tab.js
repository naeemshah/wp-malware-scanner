import React from 'react';
import PropTypes from 'prop-types';
import { withStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import { connect } from 'react-redux';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemText from '@material-ui/core/ListItemText';
import Avatar from '@material-ui/core/Avatar';
import FolderIcon from '@material-ui/icons/Folder';
import FileCopyIcon from '@material-ui/icons/FileCopy';
import WorkIcon from '@material-ui/icons/Work';
import BeachAccessIcon from '@material-ui/icons/BeachAccess';
import Grid from '@material-ui/core/Grid';
import Checkbox from '@material-ui/core/Checkbox';
import {getRootFiles} from "../actions/fileaAtions"
import CircularProgress from '@material-ui/core/CircularProgress';
import ListSubheader from '@material-ui/core/ListSubheader';
import Button from '@material-ui/core/Button';
import SearchIcon from '@material-ui/icons/Search';
import Icon from '@material-ui/core/Icon';
import Select from '@material-ui/core/Select';
import MenuItem from '@material-ui/core/MenuItem';
import InputLabel from '@material-ui/core/InputLabel';
import FormControl from '@material-ui/core/FormControl';
import Input from '@material-ui/core/Input';
import FormHelperText from '@material-ui/core/FormHelperText';

const styles = theme => ({
    root: {
      width: '100%',
      flexGrow: 1,
      backgroundColor: theme.palette.background.paper,
    },
    title: {
        margin: `${theme.spacing.unit * 4}px 0 ${theme.spacing.unit * 2}px`,
      },
      formControl: {
        margin: theme.spacing.unit,
        minWidth: 200,
         
      },
      selectEmpty: {
        marginTop: theme.spacing.unit * 2,
      }
  });



@connect(store => {
    return {
      test: store.data.test,
      rootFiles:store.file.rootFiles,
      featching:store.file.featching,
      allSelected:store.file.allSelected,
      selectFrom:store.file.selectFrom
    };
})




class ScanTab extends React.Component {

  constructor(props){
    super(props);
   this.selectAll = this.selectAll.bind(this);
  }

    componentWillMount(){
          this.props.dispatch(getRootFiles("all"))
    }

    selectFile(index){
      this.props.dispatch({"type":"SELECT_THIS_FILE",payload:index})  
    }

    selectAll(){
      this.props.dispatch({"type":"SELECT_ALL_FILES",payload:null})

    }

    

    handleChange = event => {
      this.props.dispatch(getRootFiles(event.target.value))
     
    };


    render(){
        const { classes } = this.props;
        let selected = (this.props.rootFiles.length- Object.keys(this.props.allSelected).length);
        if(this.props.featching)
        return(<CircularProgress className={classes.progress} />);
        return(
            <div className={classes.root}>
            <Grid
            
            >
            <Grid item xs={6} 
            
            >
            <Typography variant="title" className={classes.title}>
              Select Files and Folders For Scan
            </Typography>


            <FormControl className={classes.formControl}>
          <InputLabel htmlFor="age-helper">Scan Only</InputLabel>
          <Select
            value={this.props.selectFrom}
            onChange = {this.handleChange}
            input={<Input name="age" id="age-helper" />}
          >
            <MenuItem value="all">
              All Files
            </MenuItem>
            <MenuItem value={"plugins"}>Select From Plugins Only</MenuItem>
            <MenuItem value={"themes"}>Select From Themes Only</MenuItem>
            
          </Select>
          <FormHelperText>Select From</FormHelperText>
        </FormControl>


            <List style={{maxHeight:300,overflowY:"scroll"}} >

            <ListItem  dense button>
     
        <Avatar>
        
        </Avatar>
        <ListItemText  >
        <Typography variant="caption" gutterBottom align="center"> 
        {(Object.keys(this.props.allSelected).length == 0) ?  "Deselect All" : "Select All"}
        </Typography>
        </ListItemText>
        <Checkbox
              checked={(Object.keys(this.props.allSelected).length > 0) ? 0 : 1 }
              onClick={this.selectAll}
              tabIndex={-1}
              disableRipple
            />
      </ListItem>

         {this.props.rootFiles.map((e,i)=>{
         
             let file = e.name,  // need to add file checks
             icon = (e.is_folder) ?  <FolderIcon /> : <FileCopyIcon />;

                 
             return (<ListItem 
            
             dense
            button>
     
        <Avatar>
        {icon}
        </Avatar>
        <ListItemText primary={file}  />
        <Checkbox
              checked={e.selected}
              tabIndex={-1}
              onClick={this.selectFile.bind(this,i)}
             
            />
      </ListItem>);

         })}
       
      </List>
      <br/>
      <br/>
      <Button variant="contained" color="primary" disabled={(selected==0)? true : false} className={classes.button}>
      <SearchIcon className={classes.leftIcon} />
        Scan Selected Folder & Files ({selected})
       
      </Button>
      </Grid>
      </Grid>
      </div>
        );
    }

}

ScanTab.propTypes = {
    classes: PropTypes.object.isRequired,
  };
  
  export default withStyles(styles)(ScanTab);


